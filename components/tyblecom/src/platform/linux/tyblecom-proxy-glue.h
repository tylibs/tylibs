
// SPDX-FileCopyrightText: Copyright 2025 Clever Design (Switzerland) GmbH
// SPDX-License-Identifier: Apache-2.0

/*
 * This file was automatically generated by sdbus-c++-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp___home_globi__dev_clever_components_tylibs_components_tyblecom_src_platform_linux_tyblecom_proxy_glue_h__proxy__H__
#define __sdbuscpp___home_globi__dev_clever_components_tylibs_components_tyblecom_src_platform_linux_tyblecom_proxy_glue_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace bluez {

class Device1_proxy
{
public:
    static constexpr const char *INTERFACE_NAME = "org.bluez.Device1";

protected:
    Device1_proxy(sdbus::IProxy &proxy)
        : m_proxy(proxy)
    {
    }

    Device1_proxy(const Device1_proxy &)            = delete;
    Device1_proxy &operator=(const Device1_proxy &) = delete;
    Device1_proxy(Device1_proxy &&)                 = delete;
    Device1_proxy &operator=(Device1_proxy &&)      = delete;

    ~Device1_proxy() = default;

    void registerProxy() {}

public:
    void Connect() { m_proxy.callMethod("Connect").onInterface(INTERFACE_NAME); }

    void Disconnect() { m_proxy.callMethod("Disconnect").onInterface(INTERFACE_NAME); }

    void ConnectProfile(const std::string &uuid)
    {
        m_proxy.callMethod("ConnectProfile").onInterface(INTERFACE_NAME).withArguments(uuid);
    }

    void DisconnectProfile(const std::string &uuid)
    {
        m_proxy.callMethod("DisconnectProfile").onInterface(INTERFACE_NAME).withArguments(uuid);
    }

    void Pair() { m_proxy.callMethod("Pair").onInterface(INTERFACE_NAME); }

    void CancelPairing() { m_proxy.callMethod("CancelPairing").onInterface(INTERFACE_NAME); }

public:
    std::string Address() { return m_proxy.getProperty("Address").onInterface(INTERFACE_NAME).get<std::string>(); }

    std::string AddressType()
    {
        return m_proxy.getProperty("AddressType").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string Name() { return m_proxy.getProperty("Name").onInterface(INTERFACE_NAME).get<std::string>(); }

    std::string Icon() { return m_proxy.getProperty("Icon").onInterface(INTERFACE_NAME).get<std::string>(); }

    uint32_t Class() { return m_proxy.getProperty("Class").onInterface(INTERFACE_NAME).get<uint32_t>(); }

    uint16_t Appearance() { return m_proxy.getProperty("Appearance").onInterface(INTERFACE_NAME).get<uint16_t>(); }

    std::vector<std::string> UUIDs()
    {
        return m_proxy.getProperty("UUIDs").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

    bool Paired() { return m_proxy.getProperty("Paired").onInterface(INTERFACE_NAME).get<bool>(); }

    bool Connected() { return m_proxy.getProperty("Connected").onInterface(INTERFACE_NAME).get<bool>(); }

    bool Trusted() { return m_proxy.getProperty("Trusted").onInterface(INTERFACE_NAME).get<bool>(); }

    void Trusted(const bool &value) { m_proxy.setProperty("Trusted").onInterface(INTERFACE_NAME).toValue(value); }

    bool Blocked() { return m_proxy.getProperty("Blocked").onInterface(INTERFACE_NAME).get<bool>(); }

    void Blocked(const bool &value) { m_proxy.setProperty("Blocked").onInterface(INTERFACE_NAME).toValue(value); }

    bool WakeAllowed() { return m_proxy.getProperty("WakeAllowed").onInterface(INTERFACE_NAME).get<bool>(); }

    void WakeAllowed(const bool &value)
    {
        m_proxy.setProperty("WakeAllowed").onInterface(INTERFACE_NAME).toValue(value);
    }

    std::string Alias() { return m_proxy.getProperty("Alias").onInterface(INTERFACE_NAME).get<std::string>(); }

    void Alias(const std::string &value) { m_proxy.setProperty("Alias").onInterface(INTERFACE_NAME).toValue(value); }

    sdbus::ObjectPath Adapter()
    {
        return m_proxy.getProperty("Adapter").onInterface(INTERFACE_NAME).get<sdbus::ObjectPath>();
    }

    bool LegacyPairing() { return m_proxy.getProperty("LegacyPairing").onInterface(INTERFACE_NAME).get<bool>(); }

    std::string Modalias() { return m_proxy.getProperty("Modalias").onInterface(INTERFACE_NAME).get<std::string>(); }

    int16_t RSSI() { return m_proxy.getProperty("RSSI").onInterface(INTERFACE_NAME).get<int16_t>(); }

    int16_t TxPower() { return m_proxy.getProperty("TxPower").onInterface(INTERFACE_NAME).get<int16_t>(); }

    std::map<uint16_t, sdbus::Variant> ManufacturerData()
    {
        return m_proxy.getProperty("ManufacturerData")
            .onInterface(INTERFACE_NAME)
            .get<std::map<uint16_t, sdbus::Variant>>();
    }

    std::map<std::string, sdbus::Variant> ServiceData()
    {
        return m_proxy.getProperty("ServiceData")
            .onInterface(INTERFACE_NAME)
            .get<std::map<std::string, sdbus::Variant>>();
    }

    bool ServicesResolved() { return m_proxy.getProperty("ServicesResolved").onInterface(INTERFACE_NAME).get<bool>(); }

    std::vector<bool> AdvertisingFlags()
    {
        return m_proxy.getProperty("AdvertisingFlags").onInterface(INTERFACE_NAME).get<std::vector<bool>>();
    }

    std::map<uint8_t, sdbus::Variant> AdvertisingData()
    {
        return m_proxy.getProperty("AdvertisingData")
            .onInterface(INTERFACE_NAME)
            .get<std::map<uint8_t, sdbus::Variant>>();
    }

private:
    sdbus::IProxy &m_proxy;
};

} // namespace bluez
} // namespace org

namespace org {
namespace bluez {

class Adapter1_proxy
{
public:
    static constexpr const char *INTERFACE_NAME = "org.bluez.Adapter1";

protected:
    Adapter1_proxy(sdbus::IProxy &proxy)
        : m_proxy(proxy)
    {
    }

    Adapter1_proxy(const Adapter1_proxy &)            = delete;
    Adapter1_proxy &operator=(const Adapter1_proxy &) = delete;
    Adapter1_proxy(Adapter1_proxy &&)                 = delete;
    Adapter1_proxy &operator=(Adapter1_proxy &&)      = delete;

    ~Adapter1_proxy() = default;

    void registerProxy() {}

public:
    void StartDiscovery() { m_proxy.callMethod("StartDiscovery").onInterface(INTERFACE_NAME); }

    void SetDiscoveryFilter(const std::map<std::string, sdbus::Variant> &properties)
    {
        m_proxy.callMethod("SetDiscoveryFilter").onInterface(INTERFACE_NAME).withArguments(properties);
    }

    void StopDiscovery() { m_proxy.callMethod("StopDiscovery").onInterface(INTERFACE_NAME); }

    void RemoveDevice(const sdbus::ObjectPath &device)
    {
        m_proxy.callMethod("RemoveDevice").onInterface(INTERFACE_NAME).withArguments(device);
    }

    std::vector<std::string> GetDiscoveryFilters()
    {
        std::vector<std::string> result;
        m_proxy.callMethod("GetDiscoveryFilters").onInterface(INTERFACE_NAME).storeResultsTo(result);
        return result;
    }

    void ConnectDevice(const std::map<std::string, sdbus::Variant> &properties)
    {
        m_proxy.callMethod("ConnectDevice").onInterface(INTERFACE_NAME).withArguments(properties);
    }

public:
    std::string Address() { return m_proxy.getProperty("Address").onInterface(INTERFACE_NAME).get<std::string>(); }

    std::string AddressType()
    {
        return m_proxy.getProperty("AddressType").onInterface(INTERFACE_NAME).get<std::string>();
    }

    std::string Name() { return m_proxy.getProperty("Name").onInterface(INTERFACE_NAME).get<std::string>(); }

    std::string Alias() { return m_proxy.getProperty("Alias").onInterface(INTERFACE_NAME).get<std::string>(); }

    void Alias(const std::string &value) { m_proxy.setProperty("Alias").onInterface(INTERFACE_NAME).toValue(value); }

    uint32_t Class() { return m_proxy.getProperty("Class").onInterface(INTERFACE_NAME).get<uint32_t>(); }

    bool Powered() { return m_proxy.getProperty("Powered").onInterface(INTERFACE_NAME).get<bool>(); }

    void Powered(const bool &value) { m_proxy.setProperty("Powered").onInterface(INTERFACE_NAME).toValue(value); }

    bool Discoverable() { return m_proxy.getProperty("Discoverable").onInterface(INTERFACE_NAME).get<bool>(); }

    void Discoverable(const bool &value)
    {
        m_proxy.setProperty("Discoverable").onInterface(INTERFACE_NAME).toValue(value);
    }

    uint32_t DiscoverableTimeout()
    {
        return m_proxy.getProperty("DiscoverableTimeout").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    void DiscoverableTimeout(const uint32_t &value)
    {
        m_proxy.setProperty("DiscoverableTimeout").onInterface(INTERFACE_NAME).toValue(value);
    }

    bool Pairable() { return m_proxy.getProperty("Pairable").onInterface(INTERFACE_NAME).get<bool>(); }

    void Pairable(const bool &value) { m_proxy.setProperty("Pairable").onInterface(INTERFACE_NAME).toValue(value); }

    uint32_t PairableTimeout()
    {
        return m_proxy.getProperty("PairableTimeout").onInterface(INTERFACE_NAME).get<uint32_t>();
    }

    void PairableTimeout(const uint32_t &value)
    {
        m_proxy.setProperty("PairableTimeout").onInterface(INTERFACE_NAME).toValue(value);
    }

    bool Discovering() { return m_proxy.getProperty("Discovering").onInterface(INTERFACE_NAME).get<bool>(); }

    std::vector<std::string> UUIDs()
    {
        return m_proxy.getProperty("UUIDs").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

    std::string Modalias() { return m_proxy.getProperty("Modalias").onInterface(INTERFACE_NAME).get<std::string>(); }

private:
    sdbus::IProxy &m_proxy;
};

} // namespace bluez
} // namespace org

namespace org {
namespace bluez {

class LEAdvertisement1_proxy
{
public:
    static constexpr const char *INTERFACE_NAME = "org.bluez.LEAdvertisement1";

protected:
    LEAdvertisement1_proxy(sdbus::IProxy &proxy)
        : m_proxy(proxy)
    {
    }

    LEAdvertisement1_proxy(const LEAdvertisement1_proxy &)            = delete;
    LEAdvertisement1_proxy &operator=(const LEAdvertisement1_proxy &) = delete;
    LEAdvertisement1_proxy(LEAdvertisement1_proxy &&)                 = delete;
    LEAdvertisement1_proxy &operator=(LEAdvertisement1_proxy &&)      = delete;

    ~LEAdvertisement1_proxy() = default;

    void registerProxy() {}

public:
    void Release() { m_proxy.callMethod("Release").onInterface(INTERFACE_NAME); }

public:
    std::string Type() { return m_proxy.getProperty("Type").onInterface(INTERFACE_NAME).get<std::string>(); }

    std::vector<std::string> ServiceUUIDs()
    {
        return m_proxy.getProperty("ServiceUUIDs").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

    std::map<std::string, sdbus::Variant> ServiceData()
    {
        return m_proxy.getProperty("ServiceData")
            .onInterface(INTERFACE_NAME)
            .get<std::map<std::string, sdbus::Variant>>();
    }

    std::map<uint16_t, sdbus::Variant> ManufacturerData()
    {
        return m_proxy.getProperty("ManufacturerData")
            .onInterface(INTERFACE_NAME)
            .get<std::map<uint16_t, sdbus::Variant>>();
    }

    std::map<uint8_t, sdbus::Variant> Data()
    {
        return m_proxy.getProperty("Data").onInterface(INTERFACE_NAME).get<std::map<uint8_t, sdbus::Variant>>();
    }

    bool Discoverable() { return m_proxy.getProperty("Discoverable").onInterface(INTERFACE_NAME).get<bool>(); }

    uint16_t DiscoverableTimeout()
    {
        return m_proxy.getProperty("DiscoverableTimeout").onInterface(INTERFACE_NAME).get<uint16_t>();
    }

    std::vector<std::string> Includes()
    {
        return m_proxy.getProperty("Includes").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

    std::string LocalName() { return m_proxy.getProperty("LocalName").onInterface(INTERFACE_NAME).get<std::string>(); }

    uint16_t Appearance() { return m_proxy.getProperty("Appearance").onInterface(INTERFACE_NAME).get<uint16_t>(); }

    uint16_t Duration() { return m_proxy.getProperty("Duration").onInterface(INTERFACE_NAME).get<uint16_t>(); }

    uint16_t Timeout() { return m_proxy.getProperty("Timeout").onInterface(INTERFACE_NAME).get<uint16_t>(); }

private:
    sdbus::IProxy &m_proxy;
};

} // namespace bluez
} // namespace org

namespace org {
namespace bluez {

class LEAdvertisingManager1_proxy
{
public:
    static constexpr const char *INTERFACE_NAME = "org.bluez.LEAdvertisingManager1";

protected:
    LEAdvertisingManager1_proxy(sdbus::IProxy &proxy)
        : m_proxy(proxy)
    {
    }

    LEAdvertisingManager1_proxy(const LEAdvertisingManager1_proxy &)            = delete;
    LEAdvertisingManager1_proxy &operator=(const LEAdvertisingManager1_proxy &) = delete;
    LEAdvertisingManager1_proxy(LEAdvertisingManager1_proxy &&)                 = delete;
    LEAdvertisingManager1_proxy &operator=(LEAdvertisingManager1_proxy &&)      = delete;

    ~LEAdvertisingManager1_proxy() = default;

    void registerProxy() {}

    virtual void onRegisterAdvertisementReply(std::optional<sdbus::Error> error) = 0;

public:
    sdbus::PendingAsyncCall RegisterAdvertisement(const sdbus::ObjectPath                     &advertisement,
                                                  const std::map<std::string, sdbus::Variant> &options)
    {
        return m_proxy.callMethodAsync("RegisterAdvertisement")
            .onInterface(INTERFACE_NAME)
            .withArguments(advertisement, options)
            .uponReplyInvoke(
                [this](std::optional<sdbus::Error> error) { this->onRegisterAdvertisementReply(std::move(error)); });
    }

    void UnregisterAdvertisement(const sdbus::ObjectPath &service)
    {
        m_proxy.callMethod("UnregisterAdvertisement").onInterface(INTERFACE_NAME).withArguments(service);
    }

public:
    uint8_t ActiveInstances()
    {
        return m_proxy.getProperty("ActiveInstances").onInterface(INTERFACE_NAME).get<uint8_t>();
    }

    uint8_t SupportedInstances()
    {
        return m_proxy.getProperty("SupportedInstances").onInterface(INTERFACE_NAME).get<uint8_t>();
    }

    std::vector<std::string> SupportedIncludes()
    {
        return m_proxy.getProperty("SupportedIncludes").onInterface(INTERFACE_NAME).get<std::vector<std::string>>();
    }

private:
    sdbus::IProxy &m_proxy;
};

} // namespace bluez
} // namespace org

namespace org {
namespace bluez {

class GattManager1_proxy
{
public:
    static constexpr const char *INTERFACE_NAME = "org.bluez.GattManager1";

protected:
    GattManager1_proxy(sdbus::IProxy &proxy)
        : m_proxy(proxy)
    {
    }

    GattManager1_proxy(const GattManager1_proxy &)            = delete;
    GattManager1_proxy &operator=(const GattManager1_proxy &) = delete;
    GattManager1_proxy(GattManager1_proxy &&)                 = delete;
    GattManager1_proxy &operator=(GattManager1_proxy &&)      = delete;

    ~GattManager1_proxy() = default;

    void registerProxy() {}

    virtual void onRegisterApplicationReply(std::optional<sdbus::Error> error) = 0;

public:
    sdbus::PendingAsyncCall RegisterApplication(const sdbus::ObjectPath                     &application,
                                                const std::map<std::string, sdbus::Variant> &options)
    {
        return m_proxy.callMethodAsync("RegisterApplication")
            .onInterface(INTERFACE_NAME)
            .withArguments(application, options)
            .uponReplyInvoke(
                [this](std::optional<sdbus::Error> error) { this->onRegisterApplicationReply(std::move(error)); });
    }

    void UnregisterApplication(const sdbus::ObjectPath &application)
    {
        m_proxy.callMethod("UnregisterApplication").onInterface(INTERFACE_NAME).withArguments(application);
    }

private:
    sdbus::IProxy &m_proxy;
};

} // namespace bluez
} // namespace org

#endif
